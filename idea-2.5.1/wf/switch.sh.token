#!<BASH_LOC>

# $Id: switch-jtc.sh.token,v 1.5 2005/01/17 21:54:15 sreenath Exp $

# CALLED_AS will hold the name of the script as we were invoked, since we
# are probably being accessed through symlinks. How we are called determines
# how we proceed through the case statement, or switch, at the bottom of the
# script.
CALLED_AS=`basename $0`
ARGS=$*

# Signal Handler
signal_handler() {
	exit 2;
}

# Install signal handler for signals INT, TERM, USR1 and USR2
trap signal_handler INT TERM USR1 USR2

# unset mc variable in the environment, if there is any. 
# This seems to cause problems for creating the sge_job.sh script.
unset mc

# See if the --debug flag has been specified in which case echo shell logging messages
debug=`echo $ARGS|grep -c "\--debug"`
ARGS=`echo $ARGS | sed 's/--debug//'`

# See if a pidfile has been specified, in which case this file has to be removed
# after the script completion or abortion.
pidfile=`echo $ARGS|grep -c "pidfile"`

# Make sure WF_ROOT_INSTALL is correct. If it is set then do nothing, otherwise
# If the path is incorrect, change appropriately. Change this variable if it is installed 
# in a different location.
if [ -z $WF_ROOT_INSTALL ]; then
    export WF_ROOT_INSTALL=${WF_ROOT}
else
    if [ "$debug" = "1" ]; then
        echo "Using $WF_ROOT_INSTALL as install root"
    fi
fi

# Grab the logger configuration if one is specified and strip it from the arguments string
logconf=`echo $ARGS | sed -n '/.*--logconf[=\| ]/p'`
logconf=`echo $logconf | sed 's/.*--logconf[=\| ]//' | sed 's/[  ].*$//' `;
if [ "$debug" = "1" ]; then
    echo "Logger conf: $logconf"
fi
ARGS=`echo $ARGS | sed 's/--logconf[=\| ]\S*//'`

# Grab the jar file if one is specified by user 
jars=`echo $ARGS | sed -n '/.*--jars[=\| ]/p'`
jars=`echo $jars | sed 's/.*--jars[=\| ]//' | sed 's/[ 	].*$//' `;
if [ "$debug" = "1" ]; then
    echo "JARS $jars"
fi
ARGS=`echo $ARGS | sed 's/--jars[=\| ]\S*//'`

# Grab the initial heap size if one is specified by user 
initheap=`echo $ARGS | sed -n '/.*--init-heap[=\| ]/p'`
initheap=`echo $initheap | sed 's/.*--init-heap[=\| ]//' | sed 's/[ 	].*$//' `;
if [ "$debug" = "1" ]; then
    echo "Initial Heap: $initheap"
fi
ARGS=`echo $ARGS | sed 's/--init-heap[=\| ]\S*//'`

# Grab the max heap size if one is specified by user 
maxheap=`echo $ARGS | sed -n '/.*--max-heap[=\| ]/p'`
maxheap=`echo $maxheap | sed 's/.*--max-heap[=\| ]//' | sed 's/[ 	].*$//' `;
if [ "$debug" = "1" ]; then
    echo "Max Heap: $maxheap"
fi
ARGS=`echo $ARGS | sed 's/--max-heap[=\| ]\S*//'`

# Grab the thread stack size if one is specified by user 
threadstack=`echo $ARGS | sed -n '/.*--thread-stack[=\| ]/p'`
threadstack=`echo $threadstack | sed 's/.*--thread-stack[=\| ]//' | sed 's/[ 	].*$//' `;
if [ "$debug" = "1" ]; then
    echo "Thread stack: $threadstack"
fi
ARGS=`echo $ARGS | sed 's/--thread-stack[=\| ]\S*//'`

# Grab instance file name if specified
instance=`echo $ARGS | sed -n '/.*-i[=\| ]/p'`
instance=`echo $instance | sed 's/.*-i[=\| ]//' | sed 's/[ 	].*$//' `;

if [ -z $instance ]; then
    instance="$$"
fi
if [ "$debug" = "1" ]; then
    echo "Instance file: $instance"      
fi


#############################################################################

establish_environment() {
    if [ "$debug" = "1" ]; then
        echo "================    Establishing environment"
    fi

    # Set WF_ROOT
    export WF_ROOT=$WF_ROOT_INSTALL
    if [ "$debug" = "1" ]; then
        echo "Workflow root: $WF_ROOT"
    fi

    # Set the environment where jar files are stored.
    export WF_JARS="${WF_ROOT}/jars"

    # Set the classpath variable for running CreateWorkflow and RunWorkflow scripts.
    # This basically includes jar files using the WF_JARS enviroment variable set up
    # above.
    export cp=".:${WF_ROOT}:${WF_JARS}/wf-3.1.1.jar:${WF_JARS}/jdom.jar:${WF_JARS}/castor-1.0.4.jar:${WF_JARS}/commons-logging.jar:${WF_JARS}/xerces.jar:${WF_JARS}/jconn2.jar:${WF_JARS}/tigr-shared-2.0.1.jar:${WF_JARS}/tigr-htc-2.0.2.jar:${WF_JARS}/icons.jar:${WF_JARS}/log4j-1.2.8.jar:${WF_JARS}/xercesImpl.jar:${WF_JARS}/xmlParserAPIs.jar:${WF_JARS}/xmlrpc-1.1.jar:${WF_JARS}/junit.jar:${WF_JARS}/junit-addons-1.4.jar:${WF_JARS}/drmaa.jar:${WF_JARS}/mysql-connector-java-5.1.5-bin.jar"

    # If user has specified jars then prepend that
    if [ "$jars" != "" ]; then
        cp="$jars:${cp}"
    fi

    # Set the PATH environment variable. If, it's already set, then prepend items
    # to the list.
    if [ -z $PATH ]; then 
        export PATH="${WF_ROOT}/bin:${WF_ROOT}/add-ons/bin:${WF_ROOT}"
    else 
        export PATH="${WF_ROOT}/bin:${WF_ROOT}/add-ons/bin:${WF_ROOT}:${PATH}"
    fi 

    if [ "$debug" = "1" ]; then
        echo "================    Using correct version of Java"
    fi

	# Set maximum stacksize limit. This is a bash built-in. See `man bash`.
    # Seems like the JVM on alphas needs this, without this jvm crashes
    #ulimit -s 32000
}

#############################################################################

x_CreateWorkflow() {
    if [ "$debug" = "1" ]; then
        echo "================    Executing CreateWorkflow"
    fi

    # Build the command invocation string
    COMMAND="runJava -classpath ${cp} -Dwf.instance.file=${instance} -Dproject.config.file=${WF_ROOT}/workflow.config   -Dorg.xml.sax.parser=org.apache.xerces.parsers.SAXParser "
    # If a logger configuration is specified then add that property
    if [ "$logconf" != "" ]; then
        COMMAND="${COMMAND} -Dlog4j.configuration=${logconf}"
    fi
    COMMAND="${COMMAND} org.tigr.workflow.common.WorkflowInstanceBuilder ${ARGS}"

    if [ "$debug" = "1" ]; then
        echo "Invocation: $COMMAND"
        echo
    fi

    # Executing command using 'bash -c' so that it gets the right return value from the java
	# class. 
    bash -c "$COMMAND"

	# Get the return value of the executed command
	ret=$?
    if [ $ret == 0 ]; then
        if [ "$debug" = "1" ]; then
            echo " Workflow instance created successfully. Exiting."
        fi
        exit $ret;
    else
        if [ "$debug" = "1" ]; then
            echo " Could not create Workflow instance.  Aborting."
        fi
        exit $ret;
    fi
}

#############################################################################

x_RunDistributedWorkflow() {
    if [ "$debug" = "1" ]; then
        echo "================    Executing RunDistributedWorkflow"
    fi

    COMMAND="${WF_ROOT}/RunDistributedWorkflow ${ARGS}"

    if [ "$debug" = "1" ]; then
        echo $COMMAND
        echo
    fi
	# Executing command using 'bash -c' so that it gets the right return value from the java
	# class. 
    bash -c "$COMMAND"
}

#############################################################################

x_RunWorkflow() {
    if [ "$debug" = "1" ]; then
        echo "================    Executing RunWorkflow"
    fi

	# Get the pid file name, if specified
	if [ "$pidfile" = "1" ]; then
		pidfile=`echo $ARGS | sed "s/^.*\-pidfile//g"`
		pidfile=`echo $pidfile | awk '{print $1}'`
		#echo "Current Workflow pid file is $pidfile"
	fi

	# Set the default initial heap, max heap
    if [ "$initheap" = "" ]; then
    	initheap="100m"
    fi
    if [ "$maxheap" = "" ]; then
    	maxheap="256m"
    fi	

    # Pass maxheap, minheap and thread stack sizes to WorkflowEngine, 
    # if the values are specified by the user.
    if [ "$initheap" != "100m" ]; then
	ARGS="${ARGS} --min-heap=${initheap}"
    fi

    if [ "$maxheap" != "256m" ]; then
	ARGS="${ARGS} --max-heap=${maxheap}"
    fi

    # Build the command invocation string
    COMMAND="runJava -classpath ${cp} -Xms${initheap} -Xmx${maxheap} -XX:+UseAltSigs -Dwf.instance.file=${instance} -Dproject.config.file=${WF_ROOT}/workflow.config   -Dorg.xml.sax.parser=org.apache.xerces.parsers.SAXParser "
    
    # If thread stack size is specified then set it
    if [ "$threadstack" != "" ]; then
        COMMAND="${COMMAND} -Xss${threadstack} "

	# Pass the stack size the WorkflowEngine
	ARGS="${ARGS} --threadstack=${threadstack}";
    fi

    # If a logger configuration is specified then add that property
    if [ "$logconf" != "" ]; then
        COMMAND="${COMMAND} -Dlog4j.configuration=${logconf}"
    fi

    # Use the htc.conf file, which is under the server-conf directory.
    COMMAND="${COMMAND} -Dorg.tigr.htc.config=${WF_ROOT}/server-conf/htc.conf"

    COMMAND="${COMMAND} org.tigr.workflow.common.WorkflowEngine ${ARGS}"

    # Export the env variable WF_INSTANCE_FILE that will allow perl scripts to log
    export WF_INSTANCE_FILE=$instance
    if [ "$debug" = "1" ]; then
        echo "Workflow instance environment variable: $WF_INSTANCE_FILE"
        echo $COMMAND
        echo
    fi
	
	# Executing command using 'bash -c' so that it gets the right return value from the java
	# class. 
    bash -c "$COMMAND"
	ret=$?

    if [ $ret == 0 ]; then
        if [ "$debug" = "1" ]; then
            echo " Workflow instance executed successfully. Exiting."
        fi
		# Remove the workflow pid file
		rm $pidfile "$pidfile.log"
        exit $ret;
    else
        if [ "$debug" = "1" ]; then
            echo " Couldn't execute workflow instance.  Aborting."
        fi
		# Remove the workflow pid file
		rm $pidfile "$pidfile.log"
        exit $ret;
    fi
}

#############################################################################

x_WorkflowMonitor() {
    if [ "$debug" = "1" ]; then
        echo "================    Executing WorkflowMonitor"
    fi

    # Change the instance file name for the logging prurpose
    instance="${instance}.monitor"

    # Build the command invocation string
    COMMAND="runJava -classpath ${cp} -Dwf.instance.file=${instance} -Dproject.config.file=${WF_ROOT}/workflow.config  -Dorg.xml.sax.parser=org.apache.xerces.parsers.SAXParser  "
    # If a logger configuration is specified then add that property
    if [ "$logconf" != "" ]; then
        COMMAND="${COMMAND} -Dlog4j.configuration=${logconf}"
    fi

    # As the workflow editor does not understand debug and htctest flags strip these if they exist
	if [ "$debug" = "1" ]; then 
		# Remove the --debug flag before invoking the command
		ARGS=`echo $ARGS | sed "s/\-\-debug//g"`
	fi

	# Remove the --htctest flag if it part of the arguments
	if [ "$htctest" = "1" ]; then
		ARGS=`echo $ARGS | sed "s/\-\-htctest//g"`
	fi


    COMMAND="${COMMAND} org.tigr.workflow.ui.WorkflowEngineMonitor ${ARGS}"

    if [ "$debug" = "1" ]; then
        echo $COMMAND
        echo
    fi

	# Executing command using 'bash -c' so that it gets the right return value from the java
	# class. 
    bash -c "$COMMAND"

	exit $?
}

#############################################################################

x_TestSuite() {

	# Define a log file name for the test suite classes
	testlog="wf-test-suite"
	
	if [ "$debug" = "1" ]; then 
        echo "================    Executing Workflow test suite"

		# Remove the --debug flag before invoking the command
		ARGS=`echo $ARGS | sed "s/\-\-debug//g"`
	fi

	# Remove the --htctest flag if it part of the arguments
	if [ "$htctest" = "1" ]; then
		ARGS=`echo $ARGS | sed "s/\-\-htctest//g"`
	fi

	# Remove the --pidfile flag
	if [ "$pidfile" = "1" ]; then
		ARGS=`echo $ARGS | sed "s/\-\-pidfile.*$//g"`
	fi

	# Build the command invocation string
    COMMAND="runJava -classpath ${cp} -Dwf.instance.file=${testlog} \
    -Dworkflow.test.props.dir=${WF_ROOT}/testing/testprops/ \
    -Dproject.config.file=${WF_ROOT}/workflow.config -Xms100m -Xmx1000m \
    -Dorg.xml.sax.parser=org.apache.xerces.parsers.SAXParser \
    -Dorg.tigr.htc.config=${WF_ROOT}/server-conf/htc.conf"

    # If a logger configuration is specified then add that property
    if [ "$logconf" != "" ]; then
        COMMAND="${COMMAND} -Dlog4j.configuration=${logconf}"
    fi

    COMMAND="${COMMAND} org.tigr.workflow.common.test.TestWorkflowInstallSuite ${ARGS}"

    if [ "$debug" = "1" ]; then
        echo $COMMAND
        echo
    fi

    # Executing command using 'bash -c' so that it gets the right return value from the java
	# class. 
    bash -c "$COMMAND"

	exit $?
}


#############################################################################

x_WorkflowEditor() {
    if [ "$debug" = "1" ]; then
        echo "================    Executing WorkflowEditor"
    fi

    # Change the instance file name for the logging prurpose
    instance="${instance}.editor"

    # Build the command invocation string
    COMMAND="runJava -classpath ${cp} -Dwf.instance.file=${instance} -Dproject.config.file=${WF_ROOT}/workflow.config   -Dorg.xml.sax.parser=org.apache.xerces.parsers.SAXParser "
    # If a logger configuration is specified then add that property
    if [ "$logconf" != "" ]; then
        COMMAND="${COMMAND} -Dlog4j.configuration=${logconf}"
    fi

    # As the workflow editor does not understand debug and htctest flags strip these if they exist
	if [ "$debug" = "1" ]; then 
		# Remove the --debug flag before invoking the command
		ARGS=`echo $ARGS | sed "s/\-\-debug//g"`
	fi

	# Remove the --htctest flag if it part of the arguments
	if [ "$htctest" = "1" ]; then
		ARGS=`echo $ARGS | sed "s/\-\-htctest//g"`
	fi

	# Remove the --pidfile flag
	if [ "$pidfile" = "1" ]; then
		ARGS=`echo $ARGS | sed "s/\-\-pidfile.*$//g"`
	fi


    COMMAND="${COMMAND} org.tigr.workflow.ui.WorkflowEditor ${ARGS}"

    if [ "$debug" = "1" ]; then
        echo $COMMAND
        echo
    fi

    # Executing command using 'bash -c' so that it gets the right return value from the java
	# class. 
    bash -c "$COMMAND"

	exit $?
}

#############################################################################

x_CheckWorkflow() {
    if [ "$debug" = "1" ]; then
        echo "================    Executing CheckWorkflow"
    fi

    # Change the instance file name for the logging prurpose
    instance="${instance}.check"

    # Build the command invocation string
    COMMAND="runJava -classpath ${cp} -Dwf.instance.file=${instance} -Dproject.config.file=${WF_ROOT}/workflow.config   -Dorg.xml.sax.parser=org.apache.xerces.parsers.SAXParser "
    # If a logger configuration is specified then add that property
    if [ "$logconf" != "" ]; then
        COMMAND="${COMMAND} -Dlog4j.configuration=${logconf}"
    fi

    # As the workflow editor does not understand debug and htctest flags strip these if they exist
	if [ "$debug" = "1" ]; then 
		# Remove the --debug flag before invoking the command
		ARGS=`echo $ARGS | sed "s/\-\-debug//g"`
	fi

	# Remove the --htctest flag if it part of the arguments
	if [ "$htctest" = "1" ]; then
		ARGS=`echo $ARGS | sed "s/\-\-htctest//g"`
	fi

	# Remove the --pidfile flag
	if [ "$pidfile" = "1" ]; then
		ARGS=`echo $ARGS | sed "s/\-\-pidfile.*$//g"`
	fi


    COMMAND="${COMMAND} org.tigr.workflow.rmi.WorkflowChecker ${ARGS}"

    if [ "$debug" = "1" ]; then
        echo $COMMAND
        echo
    fi

    # Executing command using 'bash -c' so that it gets the right return value from the java
	# class. 
    bash -c "$COMMAND"

	exit $?
}

#############################################################################

x_KillWorkflow() {
    if [ "$debug" = "1" ]; then
        echo "================    Executing KillWorkflow"
    fi

    # Change the instance file name for the logging prurpose
    instance="${instance}.kill"

    # Build the command invocation string
    COMMAND="runJava -classpath ${cp} -Dwf.instance.file=${instance} -Dproject.config.file=${WF_ROOT}/workflow.config  -Dorg.xml.sax.parser=org.apache.xerces.parsers.SAXParser "
    # If a logger configuration is specified then add that property
    if [ "$logconf" != "" ]; then
        COMMAND="${COMMAND} -Dlog4j.configuration=${logconf}"
    fi

    # As the workflow editor does not understand debug and htctest flags strip these if they exist
	if [ "$debug" = "1" ]; then 
		# Remove the --debug flag before invoking the command
		ARGS=`echo $ARGS | sed "s/\-\-debug//g"`
	fi

	# Remove the --pidfile flag
	if [ "$pidfile" = "1" ]; then
		ARGS=`echo $ARGS | sed "s/\-\-pidfile.*$//g"`
	fi


    COMMAND="${COMMAND} org.tigr.workflow.common.WorkflowKiller ${ARGS}"

    if [ "$debug" = "1" ]; then
        echo $COMMAND
        echo
    fi

    # Executing command using 'bash -c' so that it gets the right return value from the java
	# class. 
    bash -c "$COMMAND"

	exit $?
}

#############################################################################

x_ModifyWorkflow() {
    if [ "$debug" = "1" ]; then
        echo "================    Executing ModifyWorkflow"
    fi

    # Change the instance file name for the logging prurpose
    instance="${instance}.modify"

    # Build the command invocation string
    COMMAND="runJava -classpath ${cp} -Dwf.instance.file=${instance} -Dproject.config.file=${WF_ROOT}/workflow.config   -Dorg.xml.sax.parser=org.apache.xerces.parsers.SAXParser "
    # If a logger configuration is specified then add that property
    if [ "$logconf" != "" ]; then
        COMMAND="${COMMAND} -Dlog4j.configuration=${logconf}"
    fi

    # As the workflow editor does not understand debug and htctest flags strip these if they exist
	if [ "$debug" = "1" ]; then 
		# Remove the --debug flag before invoking the command
		ARGS=`echo $ARGS | sed "s/\-\-debug//g"`
	fi

	# Remove the --htctest flag if it part of the arguments
	if [ "$htctest" = "1" ]; then
		ARGS=`echo $ARGS | sed "s/\-\-htctest//g"`
	fi

	# Remove the --pidfile flag
	if [ "$pidfile" = "1" ]; then
		ARGS=`echo $ARGS | sed "s/\-\-pidfile.*$//g"`
	fi


    COMMAND="${COMMAND} org.tigr.workflow.common.WorkflowModifier ${ARGS}"

    if [ "$debug" = "1" ]; then
        echo $COMMAND
        echo
    fi

    # Executing command using 'bash -c' so that it gets the right return value from the java
	# class. 
    bash -c "$COMMAND"

	exit $?
}


#############################################################################

x_CheckRegistry() {
    if [ "$debug" = "1" ]; then
        echo "================    Executing CheckRegistry"
    fi

    # Get the pid file name, if specified
    if [ "$pidfile" = "1" ]; then
	pidfile=`echo $ARGS | sed "s/^.*\-pidfile//g"`
	pidfile=`echo $pidfile | awk '{print $1}'`
	#echo "Current Workflow pid file is $pidfile"
    fi

    # Build the command invocation string
    COMMAND="runJava -classpath ${cp} -Dwf.instance.file=${instance} -Dproject.config.file=${WF_ROOT}/workflow.config   -Dorg.xml.sax.parser=org.apache.xerces.parsers.SAXParser "
    # If a logger configuration is specified then add that property
    if [ "$logconf" != "" ]; then
        COMMAND="${COMMAND} -Dlog4j.configuration=${logconf}"
    fi

    # As the workflow editor does not understand debug and htctest flags strip these if they exist
	if [ "$debug" = "1" ]; then 
		# Remove the --debug flag before invoking the command
		ARGS=`echo $ARGS | sed "s/\-\-debug//g"`
	fi


    COMMAND="${COMMAND} org.tigr.workflow.rmi.RegistryChecker ${ARGS}"

    if [ "$debug" = "1" ]; then
        echo $COMMAND
        echo
    fi

    # Executing command using 'bash -c' so that it gets the right return value from the java
	# class. 
    bash -c "$COMMAND"

	exit $?
}

#############   Here is our switch    #################

case "$CALLED_AS" in
  create_workflow)
    establish_environment
    x_CreateWorkflow
    exit $?
    ;;

  run_workflow)
    establish_environment
    x_RunWorkflow
    exit $?
    ;;

  workflow_monitor)
    establish_environment
    x_WorkflowMonitor
    exit $?
    ;;
    
  workflow_editor)
    establish_environment
    x_WorkflowEditor
    exit $?
    ;;

  check_workflow)
    establish_environment
    x_CheckWorkflow
    exit $?
    ;;

  kill_workflow)
    establish_environment
    x_KillWorkflow
    exit $?
    ;;

  control_workflow)
    establish_environment
    x_ModifyWorkflow
    exit $?
    ;;

  run_test_suite)
    establish_environment
    x_TestSuite
    exit $?
    ;;

  clean_workflow_registry)
    establish_environment
    x_CheckRegistry
    exit $?
    ;;

  *)
    echo "Unrecognized command."
    exit 255
    ;;
esac

exit $?
