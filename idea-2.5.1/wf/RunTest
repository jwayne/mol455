#!/bin/bash
# $Id: RunTest,v 1.1 2004/07/09 20:58:59 amahurka Exp $

# This class is used to execute individual test classes specified on the command line
# The first parameter should always be the name of the class followed by all other parameters
# and or flags

# Get the class which is the first parameter, the rest of the parameters are then processed
class=$1
shift
ARGS=$*

# See if the --debug flag has been specified in which case echo shell logging messages
debug=`echo $ARGS|grep -c "\--debug"`

# Grab the logger configuration if one is specified
logconf=`echo $ARGS | sed -n '/.*--logconf[=\| ]/p'`
logconf=`echo $logconf | sed 's/.*--logconf[=\| ]//' | sed 's/[ 	].*$//' `;
if [ "$debug" = "1" ]; then
    echo "Logger conf: $logconf"
fi

# Grab the jar file if one is specified by user 
jars=`echo $ARGS | sed -n '/.*--jars[=\| ]/p'`
jars=`echo $jars | sed 's/.*--jars[=\| ]//' | sed 's/[ 	].*$//' `;
if [ "$debug" = "1" ]; then
    echo "JARS $jars"
fi


# Make sure WF_ROOT_INSTALL is correct. If it is set then do nothing, otherwise
# If the path is incorrect, change appropriately. Change this variable if it is installed 
# in a different location.
if [ -z $WF_ROOT_INSTALL ]; then
    export WF_ROOT_INSTALL=${WF_ROOT}
else
    if [ "$debug" = "1" ]; then
        echo "Using $WF_ROOT_INSTALL as install root"
    fi
fi

if [ "$debug" = "1" ]; then
    echo "================    Establishing environment"
fi

# Set WF_ROOT
export WF_ROOT=$WF_ROOT_INSTALL
if [ "$debug" = "1" ]; then
    echo "Workflow root: $WF_ROOT"
fi

# Set the environment where jar files are stored.
export WF_JARS="${WF_ROOT}/jars"

# Set the classpath variable for running CreateWorkflow and RunWorkflow scripts.
# This basically includes jar files using the WF_JARS enviroment variable set up
# above.
export cp=".:${WF_ROOT_INSTALL}/:${WF_ROOT_INSTALL}/objs/:${WF_ROOT_INSTALL}/../shared/objs:${WF_JARS}/wf.jar:${WF_JARS}/jdom.jar:${WF_JARS}/castor-1.0.4.jar:${WF_JARS}/commons-logging.jar:${WF_JARS}/xerces.jar:${WF_JARS}/jconn2.jar:${WF_JARS}/shared.jar:${WF_JARS}/htcrequest.jar:${WF_JARS}/htcservice.jar:${WF_JARS}/icons.jar:${WF_JARS}/log4j-1.2.8.jar:${WF_JARS}/xercesImpl.jar:${WF_JARS}/xmlParserAPIs.jar:${WF_JARS}/xmlrpc-1.1.jar:${WF_JARS}/junit.jar:${WF_JARS}/junit-addons-1.4.jar"

# If user has specified jars then prepend that
if [ "$jars" != "" ]; then
    cp="$jars:${cp}"
fi

# Set the PATH environment variable. If, it's already set, then prepend items
# to the list.
if [ -z $PATH ]; then 
    export PATH="${WF_ROOT}/bin:${WF_ROOT}/add-ons/bin:${WF_ROOT}"
else 
    export PATH="${WF_ROOT}/bin:${WF_ROOT}/add-ons/bin:${WF_ROOT}:${PATH}"
fi 

if [ "$debug" = "1" ]; then
    echo "================    Using correct version of Java"
fi

# set maximum stacksize limit. This is a bash built-in. See `man bash`.
# Seems like the JVM on alphas needs this, without this jvm crashes
ulimit -s 32000

if [ "$debug" = "1" ]; then
    ARGS=`echo $ARGS | sed -n 's/--debug// p'`
fi

# Build the command invocation string
COMMAND="runJava -classpath ${cp} -Dwf.instance.file=${instance} -Dproject.config.file=${WF_ROOT}/workflow.config -Dworkflow.test.props.dir=${WF_ROOT}/testing/testprops  -Dorg.xml.sax.parser=org.apache.xerces.parsers.SAXParser -Dorg.tigr.htc.config=${WF_ROOT}/server-conf/htc.conf  "
# If a logger configuration is specified then add that property
if [ "$logconf" != "" ]; then
    COMMAND="${COMMAND} -Dlog4j.configuration=${logconf}"
    ARGS=`echo $ARGS | sed -n 's/--logconf[=\| ][^ ]*//p'`
fi
COMMAND="${COMMAND} ${class} ${ARGS}"

if [ "$debug" = "1" ]; then
    echo "Invocation: $COMMAND"
    echo
fi

# Executing command using 'bash -c' so that it gets the right return value from the java
# class. 
bash -c "$COMMAND"

exit $?

