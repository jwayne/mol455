#!/bin/bash
# This wrapper script is used to invoke java 141 with the changes needed for 
# specific platforms. For Linux the properties java.util.prefs.SystemRoot & 
# UserRoot are set. For alpha the shell stack size is set without which java fails.
# For solaris this just passes through all the parameters

# Get the current platform name
OS=`uname`

# Store the arguments
ARGS=$*

# Setup linux related environment. The function checks to see if the user
# has specified the location for system and user preferences in which case
# those are used, otherwise a default /tmp/$USER is set
x_linux () {
    sysprops=""
    userprops=""
    
    # See if the user has specified the systemRoot property
    systemRoot=`echo $ARGS|grep -c "\-Djava.util.prefs.systemRoot"`
    if [ "$systemRoot" = "0" ]; then
        sysprops="-Djava.util.prefs.systemRoot=/tmp/$USER"
    fi

    # See if the user has specified the userRoot property
    userRoot=`echo $ARGS|grep -c "\-Djava.util.prefs.userRoot"`
    if [ "$userRoot" = "0" ]; then
        userprops="-Djava.util.prefs.userRoot=/tmp/$USER"
    fi

    # Invoke java with all the user specified parameters
    java -Djava.security.policy=modified.policy $sysprops $userprops $ARGS
}

# Execute solaris related setup which currently is nothing
x_solaris() {
    # Invoke java with all the user specified parameters
    java $ARGS
}

# Execute the alpha related java setup. Here the stack limit is set
x_alpha() {
    # Set maximum stacksize limit. This is a bash built-in. See `man bash`.
    # Seems like the JVM on alphas needs this, without this jvm crashes
    ulimit -s 32000

    # Invoke java with all the user specified parameters
    java $ARGS
}

# Based on the operating system call the appropriate function
case "$OS" in
    Linux)
        x_linux
        exit $?
        ;;
    SunOS)
        x_solaris
        exit $?
        ;;
    OSF1)
        x_alpha
        exit $?
        ;;
esac

